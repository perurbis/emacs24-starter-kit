* Includes
#+BEGIN_SRC emacs-lisp :results silent
(starter-kit-load "python")
(starter-kit-load "js")
(starter-kit-load "haskell")
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
  
  (global-auto-revert-mode t)
  
#+END_SRC
* Global key bindings
#+BEGIN_SRC emacs-lisp :results silent
  
  
  ;; Indentation help
  (global-set-key (kbd "C-x ^") 'join-line)
  
  ;; Start proced in a similar manner to dired
  (global-set-key (kbd "C-x p") 'proced)
  
  ;; Start eshell or switch to it if it's active.
  (global-set-key (kbd "C-x m") 'eshell)
  
  ;; Start a new eshell even if one is active.
  (global-set-key (kbd "C-x M") (lambda () (interactive) (eshell t)))
  
  ;; Start a regular shell if you prefer that.
  (global-set-key (kbd "C-x M-m") 'shell)
  
  ;; If you want to be able to M-x without meta
  (global-set-key (kbd "C-x C-m") 'execute-extended-command)
  
  ;; A complementary binding to the apropos-command (C-h a)
  (define-key 'help-command "A" 'apropos)
  
  ;; a complement to the zap-to-char command, that doesn't eat up the target character
  (autoload 'zap-up-to-char "misc" "Kill up to, but not including ARGth occurrence of CHAR.")
  (global-set-key (kbd "M-Z") 'zap-up-to-char)
  
  ;; Activate occur easily inside isearch
  (define-key isearch-mode-map (kbd "C-o")
    (lambda () (interactive)
      (let ((case-fold-search isearch-case-fold-search))
        (occur (if isearch-regexp
                   isearch-string
                 (regexp-quote isearch-string))))))
  
  ;; use hippie-expand instead of dabbrev
  (global-set-key (kbd "M-/") 'hippie-expand)
  
  ;; replace buffer-menu with ibuffer
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  
  ;; toggle menu-bar visibility
  (global-set-key (kbd "<f12>") 'menu-bar-mode)
  
  (global-set-key (kbd "C-x g") 'magit-status)
  
#+END_SRC
* Extra installed packages
#+BEGIN_SRC emacs-lisp :results silent
  
  (defvar my-packages
    (list 'zenburn-theme 'solarized-theme
          'coffee-mode
          'haskell-mode
          'org-trello
          'magit
          's 'dash)
    "Libraries that should be installed by default.")
  
  (unless package-archive-contents
    (package-refresh-contents))
  (dolist (package my-packages)
    (unless (package-installed-p package)
      (package-install package)))
  
#+END_SRC
  
* Theme
#+BEGIN_SRC emacs-lisp :results silent
  (load-theme 'solarized-dark)
  
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp :results silent
  (add-to-list 'load-path "src/flycheck")
  (require 'flycheck)
  (add-hook 'after-init-hook #'global-flycheck-mode)
  
#+END_SRC

* Haskell Mode

** Init
#+BEGIN_SRC emacs-lisp :results silent
  (load "haskell-mode-autoloads")
  (require 'haskell-mode)
  (require 'hsenv)
  (custom-set-variables
   ;; Use ghci for the GHCi session. Ensures our dependencies are in scope.
   '(haskell-process-type 'cabal-ghci)
   
   ;; Use notify.el (if you have it installed) at the end of running
   ;; Cabal commands or generally things worth notifying.
   '(haskell-notify-p t)
  
   ;; To enable tags generation on save.
   '(haskell-tags-on-save t)
  
   ;; To enable stylish on save.
   '(haskell-stylish-on-save t))
  
  (add-hook 'haskell-mode-hook 'haskell-hook)
  (add-hook 'haskell-cabal-mode-hook 'haskell-cabal-hook)
  
  ;; Haskell main editing mode key bindings.
  (defun haskell-hook ()
    ;; Use simple indentation.
    (turn-on-haskell-simple-indent)
    (define-key haskell-mode-map (kbd "<return>") 'haskell-simple-indent-newline-same-col)
    (define-key haskell-mode-map (kbd "C-<return>") 'haskell-simple-indent-newline-indent)
  
    ;; Load the current file (and make a session if not already made).
    (define-key haskell-mode-map [?\C-c ?\C-l] 'haskell-process-load-file)
    (define-key haskell-mode-map [f5] 'haskell-process-load-file)
  
    ;; Switch to the REPL.
    (define-key haskell-mode-map [?\C-c ?\C-z] 'haskell-interactive-switch)
    ;; “Bring” the REPL, hiding all other windows apart from the source
    ;; and the REPL.
    (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
  
    ;; Build the Cabal project.
    (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
    ;; Interactively choose the Cabal command to run.
    (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)
  
    ;; Get the type and info of the symbol at point, print it in the
    ;; message buffer.
    (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
    (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
  
    ;; Contextually do clever things on the space key, in particular:
    ;;   1. Complete imports, letting you choose the module name.
    ;;   2. Show the type of the symbol after the space.
    (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space)
  
    ;; Jump to the imports. Keep tapping to jump between import
    ;; groups. C-u f8 to jump back again.
    (define-key haskell-mode-map [f8] 'haskell-navigate-imports)
  
    ;; Jump to the definition of the current symbol.
    (define-key haskell-mode-map (kbd "M-.") 'haskell-mode-tag-find)
  
    ;; Indent the below lines on columns after the current column.
    (define-key haskell-mode-map (kbd "C-<right>")
      (lambda ()
        (interactive)
        (haskell-move-nested 1)))
    ;; Same as above but backwards.
    (define-key haskell-mode-map (kbd "C-<left>")
      (lambda ()
        (interactive)
        (haskell-move-nested -1))))
  
  ;; Useful to have these keybindings for .cabal files, too.
  (defun haskell-cabal-hook ()
    (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
    (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)
    (define-key haskell-cabal-mode-map (kbd "C-`") 'haskell-interactive-bring)
    (define-key haskell-cabal-mode-map [?\C-c ?\C-z] 'haskell-interactive-switch))
  
  ;;(require 'notify)
  
  
#+END_SRC


* Utility functions

** Move line
#+BEGIN_SRC emacs-lisp :results silent
  
  (defun move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (setq col (current-column))
    (beginning-of-line) (setq start (point))
    (end-of-line) (forward-char) (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col)))
  
  (defun move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (move-line (if (null n) -1 (- n))))
  
  (defun move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (move-line (if (null n) 1 n)))
  
  (global-set-key (kbd "M-<up>") 'move-line-up)
  (global-set-key (kbd "M-<down>") 'move-line-down)
  
#+END_SRC



* Org set up

** Directories
#+BEGIN_SRC emacs-lisp :results silent
  
  (custom-set-variables
   '(org-directory "~/Dropbox/org")
  )
  
  (setq org-agenda-files
        '("~/Dropbox/org"
          "~/Dropbox/RealTimePython/"))
  
  (setq org-default-notes-file (concat org-directory "/inbox.org"))
  (define-key global-map "\C-cc" 'org-capture)
  
  
#+END_SRC

** Global behaviour

*** Capture
#+BEGIN_SRC emacs-lisp :results silent
  (setq org-capture-templates
        '(("t" "todo" entry (file "~/Dropbox/org/inbox.org")
           "* TODO %? :inbox:\n%U\n%a\n" :clock-in t :clock-resume t)
          ("r" "respond" entry (file+headline "~/Dropbox/org/inbox.org" "Response")
           "* TODO Respond to %:from on %:subject\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
          ("n" "note" entry (file "~/Dropbox/org/notes.org")
           "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
          ("c" "capture" entry (file+headline "~/Dropbox/org/notes.org" "Capture")
           "* %^{Title}  :capture:\n\n  Source: %u, %c\n\n  %i"
           :empty-lines 1 )))
  
  (setq org-capture-default-template "c")
  
#+END_SRC
*** Todo setup
#+BEGIN_SRC emacs-lisp :results silent
  (require 'org-trello)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
  
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-log-done 'note)
  
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING" . t) ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
  
  (setq org-stuck-projects (quote ("" nil nil "")))
  
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp :results silent
  
  ;; CLOCKING
  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;;
  ;; Show lot sof clocking history so it's easy to pick items off the C-F11 list
  (setq org-clock-history-length 36)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Change tasks to NEXT when clocking in
  (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  ;; Save clock data and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Do not prompt to resume an active clock
  (setq org-clock-persist-query-resume nil)
  ;; Enable auto clock resolution for finding open clocks
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; Include current clocking task in clock reports
  (setq org-clock-report-include-clocking-task t)
  
  (setq bh/keep-clock-running nil)
  
  (defun bh/clock-in-to-next (kw)
    "Switch a task from TODO to NEXT when clocking in.
  Skips capture tasks, projects, and subprojects.
  Switch projects and subprojects from NEXT back to TODO"
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO"))
             (bh/is-task-p))
        "NEXT")
       ((and (member (org-get-todo-state) (list "NEXT"))
             (bh/is-project-p))
        "TODO"))))
  
  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))
  
  (defun bh/punch-in (arg)
    "Start continuous clocking and set the default task to the
  selected task.  If no task is selected set the Organization task
  as the default task."
    (interactive "p")
    (setq bh/keep-clock-running t)
    (if (equal major-mode 'org-agenda-mode)
        ;;
        ;; We're in the agenda
        ;;
        (let* ((marker (org-get-at-bol 'org-hd-marker))
               (tags (org-with-point-at marker (org-get-tags-at))))
          (if (and (eq arg 4) tags)
              (org-agenda-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))
      ;;
      ;; We are not in the agenda
      ;;
      (save-restriction
        (widen)
        ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
            (org-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))))
  
  (defun bh/punch-out ()
    (interactive)
    (setq bh/keep-clock-running nil)
    (when (org-clock-is-active)
      (org-clock-out))
    (org-agenda-remove-restriction-lock))
  
  (defun bh/clock-in-default-task ()
    (save-excursion
      (org-with-point-at org-clock-default-task
        (org-clock-in))))
  
  (defun bh/clock-in-parent-task ()
    "Move point to the parent (project) task if any and clock in"
    (let ((parent-task))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (not parent-task) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (if parent-task
              (org-with-point-at parent-task
                (org-clock-in))
            (when bh/keep-clock-running
              (bh/clock-in-default-task)))))))
  
  (defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")
  
  (defun bh/clock-in-organization-task-as-default ()
    (interactive)
    (org-with-point-at (org-id-find bh/organization-task-id 'marker)
      (org-clock-in '(16))))
  
  (defun bh/clock-out-maybe ()
    (when (and bh/keep-clock-running
               (not org-clock-clocking-in)
               (marker-buffer org-clock-default-task)
               (not org-clock-resolving-clocks-due-to-idleness))
      (bh/clock-in-parent-task)))
  
  (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)
  
  ;; REFILING
  ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
  
  ; Use full outline paths for refile targets - we file directly with IDO
  (setq org-refile-use-outline-path t)
  
  ; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)
  
  ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  
  ; Use IDO for both buffer and file completion and ido-everywhere to t
  (setq org-completion-use-ido t)
  (setq ido-everywhere t)
  (setq ido-max-directory-size 100000)
  (ido-mode (quote both))
  
  ; Exclude DONE state tasks from refile targets
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  
  (setq org-refile-target-verify-function 'bh/verify-refile-target)
  
  
  ;; AGENDA SETUP
  ;; Dim blocked tasks
  (setq org-agenda-dim-blocked-tasks t)
  
  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)
  
  ;; Custom agenda command definitions
  (setq org-agenda-custom-commands
        (quote (("N" "Notes" tags "NOTE"
                 ((org-agenda-overriding-header "Notes")
                  (org-tags-match-list-sublevels t)))
                ("h" "Habits" tags-todo "STYLE=\"habit\""
                 ((org-agenda-overriding-header "Habits")
                  (org-agenda-sorting-strategy
                   '(todo-state-down effort-up category-keep))))
                (" " "Agenda"
                 ((agenda "" nil)
                  (tags "INBOX"
                        ((org-agenda-overriding-header "Tasks to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                  (tags-todo "-WAITING-CANCELLED/!NEXT|+IN-PROGRESS"
                             ((org-agenda-overriding-header "Next Tasks")
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-agenda-todo-ignore-scheduled t)
                              (org-agenda-todo-ignore-deadlines t)
                              (org-agenda-todo-ignore-with-date t)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-sorting-strategy
                               '(todo-state-down effort-up category-keep))))
                  (tags-todo "-INBOX-CANCELLED/!-HOLD-WAITING"
                             ((org-agenda-overriding-header "Tasks")
                              (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                              (org-agenda-todo-ignore-scheduled t)
                              (org-agenda-todo-ignore-deadlines t)
                              (org-agenda-todo-ignore-with-date t)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'bh/skip-non-projects)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED+WAITING/!"
                             ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                              (org-agenda-skip-function 'bh/skip-stuck-projects)
                              (org-tags-match-list-sublevels nil)
                              (org-agenda-todo-ignore-scheduled 'future)
                              (org-agenda-todo-ignore-deadlines 'future)))
                  (tags "-INBOX/"
                        ((org-agenda-overriding-header "Tasks to Archive")
                         (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil)
                ("r" "Tasks to Refile" tags "INBOX"
                 ((org-agenda-overriding-header "Tasks to Refile")
                  (org-tags-match-list-sublevels nil)))
                ("#" "Stuck Projects" tags-todo "-CANCELLED/!"
                 ((org-agenda-overriding-header "Stuck Projects")
                  (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                ("n" "Next Tasks" tags-todo "-WAITING-CANCELLED/!NEXT"
                 ((org-agenda-overriding-header "Next Tasks")
                  (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                  (org-agenda-todo-ignore-scheduled t)
                  (org-agenda-todo-ignore-deadlines t)
                  (org-agenda-todo-ignore-with-date t)
                  (org-tags-match-list-sublevels t)
                  (org-agenda-sorting-strategy
                   '(todo-state-down effort-up category-keep))))
                ("R" "Tasks" tags-todo "-INBOX-CANCELLED/!-HOLD-WAITING"
                 ((org-agenda-overriding-header "Tasks")
                  (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                  (org-agenda-sorting-strategy
                   '(category-keep))))
                ("p" "Projects" tags-todo "-HOLD-CANCELLED/!"
                 ((org-agenda-overriding-header "Projects")
                  (org-agenda-skip-function 'bh/skip-non-projects)
                  (org-agenda-sorting-strategy
                   '(category-keep))))
                ("w" "Waiting Tasks" tags-todo "-CANCELLED+WAITING/!"
                 ((org-agenda-overriding-header "Waiting and Postponed tasks"))
                 (org-tags-match-list-sublevels nil))
                ("A" "Tasks to Archive" tags "-INBOX/"
                 ((org-agenda-overriding-header "Tasks to Archive")
                  (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                  (org-tags-match-list-sublevels nil))))))
  
  (setq org-use-speed-commands t)
  (setq org-speed-commands-user (quote (("0" . ignore)
                                        ("1" . ignore)
                                        ("2" . ignore)
                                        ("3" . ignore)
                                        ("4" . ignore)
                                        ("5" . ignore)
                                        ("6" . ignore)
                                        ("7" . ignore)
                                        ("8" . ignore)
                                        ("9" . ignore)
  
                                        ("a" . ignore)
                                        ("d" . ignore)
                                        ("h" . bh/hide-other)
                                        ("i" progn
                                         (forward-char 1)
                                         (call-interactively 'org-insert-heading-respect-content))
                                        ("k" . org-kill-note-or-show-branches)
                                        ("l" . ignore)
                                        ("m" . ignore)
                                        ("q" . bh/show-org-agenda)
                                        ("r" . ignore)
                                        ("s" . org-save-all-org-buffers)
                                        ("w" . org-refile)
                                        ("x" . ignore)
                                        ("y" . ignore)
                                        ("z" . org-add-note)
  
                                        ("A" . ignore)
                                        ("B" . ignore)
                                        ("E" . ignore)
                                        ("F" . bh/restrict-to-file-or-follow)
                                        ("G" . ignore)
                                        ("H" . ignore)
                                        ("J" . org-clock-goto)
                                        ("K" . ignore)
                                        ("L" . ignore)
                                        ("M" . ignore)
                                        ("N" . bh/narrow-to-subtree)
                                        ("P" . bh/narrow-to-project)
                                        ("Q" . ignore)
                                        ("R" . ignore)
                                        ("S" . ignore)
                                        ("T" . bh/org-todo)
                                        ("U" . bh/narrow-up-one-level)
                                        ("V" . ignore)
                                        ("W" . bh/widen)
                                        ("X" . ignore)
                                        ("Y" . ignore)
                                        ("Z" . ignore))))
  
  (defun bh/show-org-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*")
    (delete-other-windows))
  
#+END_SRC
